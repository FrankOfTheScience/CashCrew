@inject LocationCategoryService LocationCategoryService
@inject TripService TripService

<div class="modal" style="@ModalDisplay">
    <div class="modal-content">
        <span class="close-button" @onclick="OnCancelClicked">X</span>
        <h2>@(IsEditing ? "Edit Trip" : "Create New Trip")</h2>
        <EditForm Model="@trip" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="name">Name:</label>
                <InputText id="name" class="form-control" @bind-Value="trip.Name" />
                <ValidationMessage For="() => trip.Name" />
            </div>
            <div class="form-group">
                <label for="location">Location:</label>
                <InputText id="location" class="form-control" @bind-Value="trip.Location" />
                <ValidationMessage For="() => trip.Location" />
            </div>
            <div class="form-group">
                <label for="categoryImage">Category Image:</label>
                <InputSelect id="categoryImage" class="form-control" @bind-Value="trip.CategoryImage" @bind-Value:event="onchange">
                    @foreach (var category in Categories)
                    {
                        <option value="@category.Image">@category.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => trip.CategoryImage" />
            </div>
            <div class="form-group">
                <label for="fromDate">From Date:</label>
                <InputDate id="fromDate" class="form-control" @bind-Value="trip.FromDate" />
                <ValidationMessage For="() => trip.FromDate" />
            </div>
            <div class="form-group">
                <label for="toDate">To Date:</label>
                <InputDate id="toDate" class="form-control" @bind-Value="trip.ToDate" />
                <ValidationMessage For="() => trip.ToDate" />
            </div>
            <div class="form-group">
                <label>Category Image Preview:</label>
                <br />
                @if (!string.IsNullOrEmpty(selectedCategoryImage))
                {
                    <img src="@selectedCategoryImage" alt="Category Image" style="width: 100px;" />
                }
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">@if (IsEditing)
                    {
                        <text>Update</text>
                    }
                    else
                    {
                        <text>Create</text>
                    }</button>
                <button type="button" class="btn btn-secondary" @onclick="OnCancelClicked">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

<style>
    .category-option {
        display: flex;
        align-items: center;
    }

    .category-image {
        width: 20px;
        height: 20px;
        margin-right: 10px;
    }
</style>

@code {
    [Parameter] public bool IsEditing { get; set; }
    [Parameter] public Trip Trip { get; set; }
    [Parameter] public IEnumerable<LocationCategory> Categories { get; set; }
    [Parameter] public EventCallback OnTripSubmitted { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private Trip trip = new Trip();
    private string selectedCategoryImage;
    private bool show = false;

    private string ModalDisplay => show ? "display:block;" : "display:none;";

    protected override void OnParametersSet()
    {
        trip = Trip;
        if (!IsEditing)
        {
            trip = new Trip();
        }
        selectedCategoryImage = trip?.CategoryImage ?? "";
    }

    public async Task ShowPopup()
    {
        show = true;
        Categories = await LocationCategoryService.GetAllLocationCategoriesAsync();
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        if (IsEditing)
        {
            await TripService.UpdateExistingTripAsync(trip);
        }
        else
        {
            await TripService.CreateNewTripAsync(trip);
        }
        show = false;
        await OnTripSubmitted.InvokeAsync();
        StateHasChanged();
    }

    private void OnCancelClicked()
    {
        ClosePopup();
    }

    private void ClosePopup()
    {
        show = false;
        OnCancel.InvokeAsync();
        StateHasChanged();
    }

    private void OnCategoryChange(ChangeEventArgs e)
    {
        selectedCategoryImage = (string)e.Value;
    }
}
