@page "/trips"
@inject TripService TripService

<h1>Trips</h1>

@if (trips is null || !trips.Any())
{
    <span>There aren't any Trips yet!</span>
    <br />
    <button class="btn btn-primary" @onclick="ShowCreateTripPopup">Create New Trip</button>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="ShowCreateTripPopup">Create New Trip</button>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Country</th>
                <th>Crew Mates</th>
                <th>Adventure Days</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var trip in trips)
            {
                <tr>
                    <td>@trip.Name</td>
                    <td>@trip.Country</td>
                    <td>@trip.CrewMates</td>
                    <td>@trip.AdventureDays</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => ShowEditTripPopup(trip)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteTrip(trip.Name)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<TripPopup @ref="tripPopup" OnTripSubmitted="OnTripSubmitted" OnCancel="OnCancelPopup" />

@code {
    private IEnumerable<TripDTO>? trips = null;
    private TripPopup? tripPopup;

    protected override async Task OnInitializedAsync()
    {
        trips = await TripService.GetTripsAsync();
    }

    private async Task ShowCreateTripPopup()
    {
        if (tripPopup != null)
        {
            tripPopup.IsEditing = false;
            tripPopup.Trip = new Trip();
            tripPopup.ShowPopup();
        }
    }

    private async Task ShowEditTripPopup(TripDTO tripDto)
    {
        if (tripPopup != null)
        {
            var trip = new Trip
            {
                Name = tripDto.Name,
                Location = tripDto.Country,
                // Assuming you have the other properties mapped correctly
            };
            tripPopup.IsEditing = true;
            tripPopup.Trip = trip;
            tripPopup.ShowPopup();
        }
    }

    private async Task DeleteTrip(string name)
    {
        await TripService.DeleteExistingTripAsync(name);
        trips = await TripService.GetTripsAsync();
        StateHasChanged();
    }

    private async Task OnTripSubmitted()
    {
        trips = await TripService.GetTripsAsync();
        StateHasChanged();
    }

    private void OnCancelPopup()
    {
        // Optional: Handle cancel logic if needed
    }
}
